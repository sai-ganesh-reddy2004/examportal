-------------pom.xml-------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>Online_Exam_Portal-1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Online_Exam_Portal-1</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-api</artifactId>
    <version>0.11.5</version>
</dependency>
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-impl</artifactId>
    <version>0.11.5</version>
    <scope>runtime</scope>
</dependency>
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if you prefer -->
    <version>0.11.5</version>
    <scope>runtime</scope>
</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
-------------------------------------------------
-----------------application.properties-----------------
spring.application.name=Online_Exam_Portal-1
server.port=2101
spring.datasource.url=jdbc:mysql://localhost:3306/oep
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

#Security
spring.security.user.name=user
spring.security.user.password=1234

# JWT Configuration
jwt.secret=hbrjkhrwvnfbvhjeqvlqnjkhgjbvvnlfnkjghfgyvhbvioewdfmfgtefrsexwtddhndkq
 # 24 hours in milliseconds (24 * 60 * 60 * 1000)
jwt.expiration=86400000

------------------------------------------------
---------onlineexamportalapplication.java---------------
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;

@SpringBootApplication
@EnableMethodSecurity
public class OnlineExamPortal1Application {

	public static void main(String[] args) {
		SpringApplication.run(OnlineExamPortal1Application.class, args);
	}

}
-------------------------------------------------------
-------------------jwtauthfilter.java-----------------------
package com.example.demo.Config;

import com.example.demo.Service.CustomUserDetailsService;
import com.example.demo.Config.JwtUtil;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JwtAuthFilter extends OncePerRequestFilter {
    private final JwtUtil jwtUtil;
	
    private final CustomUserDetailsService userDetailsService;

    @Autowired
    public JwtAuthFilter(JwtUtil jwtUtil, CustomUserDetailsService userDetailsService) {
        this.jwtUtil = jwtUtil;
        this.userDetailsService = userDetailsService;
    }
  

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String authHeader = request.getHeader("Authorization");
        String token = null;
        String username = null;

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7);
            username = jwtUtil.extractUsername(token);
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = userDetailsService.loadUserByUsername(username);

            if (jwtUtil.validateToken(token, userDetails)) {
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities());
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        filterChain.doFilter(request, response);
    }
}
-------------------------------------------------------
---------------------jwtutil.java-------------------------------
package com.example.demo.Config;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Component
public class JwtUtil {

    // Secret key for signing JWTs. Store securely, ideally in environment variables.
    @Value("${jwt.secret}")
    private String SECRET_KEY;

    // Token expiration time in milliseconds (e.g., 24 hours)
    @Value("${jwt.expiration}")
    private long EXPIRATION_TIME; // 24 hours in milliseconds

    // Retrieve username from token
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    // Retrieve expiration date from token
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    // Generic method to extract a specific claim from the token
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    // Extract all claims from the token
    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSignKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // Check if the token is expired
    private Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    // Validate the token
    public Boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    // Generate token for a user
    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        // Add roles to claims
        claims.put("roles", userDetails.getAuthorities().stream()
                .map(grantedAuthority -> grantedAuthority.getAuthority())
                .toList());
        return createToken(claims, userDetails.getUsername());
    }

    // Create the JWT token
    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(getSignKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    // Get the signing key from the secret key
    private Key getSignKey() {
        byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}
---------------------------------------------------------
---------------------------securityconfig.java-------------------
package com.example.demo.Config;

import com.example.demo.Service.CustomUserDetailsService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    private final JwtAuthFilter jwtAuthFilter;
    private final CustomUserDetailsService userDetailsService;

    public SecurityConfig(JwtAuthFilter jwtAuthFilter, CustomUserDetailsService userDetailsService) {
        this.jwtAuthFilter = jwtAuthFilter;
        this.userDetailsService = userDetailsService;
    }

    // PasswordEncoder bean for hashing passwords
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    
    // AuthenticationProvider to use CustomUserDetailsService and PasswordEncoder
    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
        authenticationProvider.setUserDetailsService(userDetailsService);
        authenticationProvider.setPasswordEncoder(passwordEncoder());
        return authenticationProvider;
    }

    // AuthenticationManager bean to handle authentication
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }

    // SecurityFilterChain to configure HTTP security
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Disable CSRF for stateless API
            .authorizeHttpRequests(authorize -> authorize
                // Allow unauthenticated access to registration and login
                .requestMatchers("/examProtal/userModule/register", "/examProtal/userModule/login","/api/admin/exams/getAllExams","/api/admin/exams/getExam/{id}","/examProtal/userModule/getById/{id}","/analytics/reports/user/{userId}","/analytics/reports/user/{userId}/exam/{examId}").permitAll()
                // ADMIN can access all users and update roles
                .requestMatchers("/examProtal/userModule/users", "/examProtal/userModule/{id}/role","qb/addQuestion","qb/addMultipleQuestions","qb/uploadFile","qb/getquestion/{id}","qb/getAll","qb/updQuestion/{id}","qb/delQuestion/{id}","qb/getByCategory/{category}","qb/getByDifficulty/{difficulty}","/api/admin/exams/update/{id}","/api/admin/exams/delete/{id}","/api/admin/exams/role/{id}","/mapping/{examId}/{questionId}","/mapping/exam/{examId}","/mapping/allexams","mapping/exam/{examId}/adminQues","/api/exams/exam/{examId}","/api/exams/{examId}/responses/{userId}","/analytics/reports/","/analytics/reports","/analytics/reports/topper","/analytics/reports/all").hasRole("ADMIN")
                // Other endpoints require authentication
                .requestMatchers("qb/attemptQuestions","mapping/exam/{examId}/questions","/api/exams/{examId}/submit","/api/exams/responses/{userId}","/analytics/reports/exams/{examId}","/analytics/reports/rank").hasAnyRole("ADMIN","STUDENT")
                .anyRequest().authenticated()
            )
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // Use stateless sessions for JWT
            )
            .authenticationProvider(authenticationProvider()) // Set custom authentication provider
            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class); // Add JWT filter before default authentication filter

        return http.build();
    }
}
-----------------------------------------------------------------------exammanagementcontroller.java-------------------------
package com.example.demo.Controller;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.DTO.AnswerSubmissionDTO;
//import com.example.demo.DTO.ExamResponseDTO;
import com.example.demo.DTO.ExamSubmissionDTO;
import com.example.demo.DTO.ResponseSummaryDTO;
import com.example.demo.DTO.UserResponseDTO;
import com.example.demo.Entity.Exam;
import com.example.demo.Entity.QuestionBank;
import com.example.demo.Entity.Response;
import com.example.demo.Exception.ResourceNotFoundException;
import com.example.demo.Repository.ExamRepository;
import com.example.demo.Service.ExamService;
import com.example.demo.Service.QuestionBankService;
import com.example.demo.Service.ResponseService;

@RestController
@RequestMapping("/api/exams")
public class ExamManagementController {

    //@Autowired
    //private ExamService examService;

    @Autowired
    private QuestionBankService questionService;

    @Autowired
    private ResponseService responseService;
    
    @Autowired
    private ExamRepository examRepository;

    @PostMapping("/{examId}/submit")
    @PreAuthorize("hasRole('STUDENT')")
    public ResponseEntity<List<ResponseSummaryDTO>> submitExam(@PathVariable Integer examId, @RequestBody ExamSubmissionDTO submissionDTO) {
        /*List<ResponseSummaryDTO> responseSummaries = new ArrayList<>();
        Optional<Exam> examOpt = examRepository.findById(examId);

        if (!examOpt.isPresent()) {
            throw new ResourceNotFoundException("Exam not found with ID: " + examId);
        }

        Exam exam = examOpt.get();

        for (AnswerSubmissionDTO ans : submissionDTO.getAnswers()) {
            Optional<QuestionBank> questionOpt = questionService.getById(ans.getQuestionId());

            if (!questionOpt.isPresent()) {
                throw new ResourceNotFoundException("Question not found with ID: " + ans.getQuestionId());
            }

            QuestionBank question = questionOpt.get();
           
            
            Response response = new Response();
            response.setUserId(submissionDTO.getUserId());
            response.setExam(exam);
            response.setQuestion(question);
            response.setSubmittedAnswer(ans.getSubmittedAnswer());

           /* int marks = question.getCorrectAnswer().equals(ans.getSubmittedAnswer()) ? question.getMaxMarks() : 0;
            response.setMarksObtained(marks);
			int marks=0;
            Response savedResponse = responseService.submitResponse(response);

            ResponseSummaryDTO summary = new ResponseSummaryDTO(
                    savedResponse.getResponseId(),
                    question.getQuestionId(),
                    ans.getSubmittedAnswer(),
                    marks
            );
            responseSummaries.add(summary);
        }

        return ResponseEntity.ok(responseSummaries);
        */
    	return responseService.submitExam(examId,submissionDTO);
    }

    @GetMapping("/responses/{userId}")
    @PreAuthorize("hasAnyRole('ADMIN','STUDENT')")
    public ResponseEntity<Map<Integer, Map<Integer, List<UserResponseDTO>>>> getUserResponse(@PathVariable Integer userId) {
        List<Response> responses = responseService.getResponsesByUser(userId);

        List<UserResponseDTO> userResponses = responses.stream()
                .map(r -> new UserResponseDTO(
                        r.getUserId(),
                        r.getQuestion().getQuestionId(),
                        r.getSubmittedAnswer(),
                        r.getMarksObtained(),
                        r.getExam().getExamId(),
                        r.getResponseId()
                ))
                .collect(Collectors.toList());

        Map<Integer, Map<Integer, List<UserResponseDTO>>> grouped = userResponses.stream()
                .collect(Collectors.groupingBy(
                        UserResponseDTO::getUserId,
                        Collectors.groupingBy(UserResponseDTO::getExamId)
                ));

        return ResponseEntity.ok(grouped);
    }

    @GetMapping("/exam/{examId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<Response>> getResponsesByExamId(@PathVariable Integer examId) {
        List<Response> responses = responseService.getResponsesByExam(examId);
        return new ResponseEntity<>(responses, HttpStatus.OK);
    }

    @GetMapping("/{examId}/responses/{userId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<UserResponseDTO>> getUserResponsesForExam(@PathVariable Integer examId, @PathVariable Integer userId) {
        List<Response> responses = responseService.getResponsesByUserAndExam(userId, examId);

        List<UserResponseDTO> userResponseDTOs = responses.stream()
                .map(r -> new UserResponseDTO(
                        r.getUserId(),
                        r.getQuestion().getQuestionId(),
                        r.getSubmittedAnswer(),
                        r.getMarksObtained(),
                        r.getExam().getExamId(),
                        r.getResponseId()
                ))
                .collect(Collectors.toList());

        return ResponseEntity.ok(userResponseDTOs);
    }
}
-----------------------------------------------------------
---------------------examquestionmappingcontroller.java-----
package com.example.demo.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.DTO.QuestionAttemptDTO;
import com.example.demo.DTO.QuestionDTO;
import com.example.demo.Entity.Exam;
import com.example.demo.Entity.ExamQuestionMapping;
import com.example.demo.Entity.QuestionBank;
import com.example.demo.Repository.ExamRepository;
import com.example.demo.Repository.QuestionBankRepo;
import com.example.demo.Service.ExamQuestionMappingService;

@RestController
@RequestMapping("/mapping")
public class ExamQuestionMappingController {
	
	@Autowired
	private ExamQuestionMappingService mappingService;
	@Autowired
	private ExamRepository examRepository;
	@Autowired
	private QuestionBankRepo questionRepo;
	@Autowired
	private ExamQuestionMappingService eqms;
	
	@PostMapping("/{examId}/{questionId}")
	@PreAuthorize("hasRole('ADMIN')")
	public ExamQuestionMapping mapQuestionToExam(@PathVariable int examId, @PathVariable int questionId) {
		Exam exam=examRepository.findById(examId).orElseThrow();
		
		QuestionBank question=questionRepo.findById(questionId).orElseThrow();
		
		return mappingService.saveMapping(exam,question);
	}
	
	@GetMapping("/exam/{examId}")
	@PreAuthorize("hasRole('ADMIN')")
	public List<ExamQuestionMapping> getQuestionsByExam(@PathVariable int examId){
		Exam exam=examRepository.findById(examId).orElseThrow();
		return mappingService.getMappingsByExam(exam);
	}
	
	@GetMapping("/allexams")
	@PreAuthorize("hasRole('ADMIN')")
	public List<ExamQuestionMapping> getAllExams()
	{
		return mappingService.getAllExams();
	}
	
	@GetMapping("/exam/{examId}/questions")
	@PreAuthorize("hasRole('STUDENT')")
	public ResponseEntity<List<QuestionAttemptDTO>> getExamQuestions(@PathVariable int examId)
	{
		List<QuestionAttemptDTO> questions = mappingService.getAllQuestions(examId);
		return ResponseEntity.ok(questions);	
	}
	@GetMapping("/exam/{examId}/adminQues")
	@PreAuthorize("hasRole('ADMIN')")
	public ResponseEntity<List<QuestionDTO>> getExamQuestionsAdmin(@PathVariable int examId)
	{
		List<QuestionDTO> questions = mappingService.getAllQuestionsAdmin(examId);
		return ResponseEntity.ok(questions);	
	}
	
}
-----------------------------------------------------------------
-------------------answersubmissiondto.java---------------
package com.example.demo.DTO;

import lombok.Data;

@Data
public class AnswerSubmissionDTO {
	private Integer questionId;
	private String submittedAnswer;

}
----------------------------------------
--------------------------------examsubmissiondto--------------
package com.example.demo.DTO;

import java.util.List;

import lombok.Data;

@Data
public class ExamSubmissionDTO {
	private Integer userId;
	//private Integer examId;
	private List<AnswerSubmissionDTO> answers;
}
-------------------------------------------------
---------------examresponsedto.java-------------
package com.example.demo.DTO;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ExamResponseDTO {
    private Integer examId;
    private String title;
    private String description;
    private Integer duration;
    private Integer totalMarks;
}
-------------------------------------------------
---------questionattemptdto----------------

package com.example.demo.DTO;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class QuestionAttemptDTO {
	private int questionId;	
	private String text;
	private String category;
	private String difficulty;
	private String option1;
	private String option2;
}
-------------------------------------------------
-------------questiondto-------------------------------------

package com.example.demo.DTO;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class QuestionDTO {
	private int questionId;
	private String text;
	private String category;
	private String difficulty;
	private String option1;
	private String option2;
	private String correctAnswer;
}
-----------------------------------------------------
------------------responsesummarydto-----------------
package com.example.demo.DTO;
 
import lombok.Data;
 
@Data
public class ResponseSummaryDTO {
    private Integer responseId;
    private Integer questionId;
    private String submittedAnswer;
    private Integer marksObtained;
 
    // Constructors
    public ResponseSummaryDTO(Integer responseId, Integer questionId, String submittedAnswer, Integer marksObtained) {
        this.responseId = responseId;
        this.questionId = questionId;
        this.submittedAnswer = submittedAnswer;
        this.marksObtained = marksObtained;
    }
 
    // Getters and Setters
    // (or use Lombok @Data for brevity)
}
---------------------------------------------------------
---------------examquestionmapping---------------
package com.example.demo.Entity;

import jakarta.persistence.*;
import lombok.*;
@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name="exam_question")
public class ExamQuestionMapping {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;
	
	@ManyToOne
	@JoinColumn(name="exam_id")
	private Exam exam;
	
	@ManyToOne
	@JoinColumn(name="question_id")
	private QuestionBank question;
}
----------------------------------------------------------
------------response-----------------------
package com.example.demo.Entity;

import java.util.Optional;

import com.example.demo.DTO.ExamResponseDTO;
import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.*;
import lombok.Data;

@Data
@Entity
public class Response {

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer responseId;
	private Integer userId;
	
	@ManyToOne
	@JoinColumn(name="exam_id")
	private Exam exam;
	
	//@JsonIgnore
	@ManyToOne
	@JoinColumn(name="question_id")
	private QuestionBank question;
	
	private String submittedAnswer;
	private Integer marksObtained;
}
----------------------------------------------
------------------questionmapper------------------------

package com.example.demo.Mapper;

import com.example.demo.DTO.QuestionDTO;
import com.example.demo.DTO.QuestionAttemptDTO;
import com.example.demo.Entity.ExamQuestionMapping;
import com.example.demo.Entity.QuestionBank;

public class QuestionMapper {

		public static QuestionDTO toDTO(QuestionBank qb) {
			return new QuestionDTO(
				qb.getQuestionId(),
				qb.getText(),
				qb.getCategory(),
				qb.getDifficulty(),
				qb.getOption1(),
				qb.getOption2(),
				qb.getCorrectAnswer()
				);
		}

		public static QuestionAttemptDTO toAttemptDTO(QuestionBank qb) {
			return new QuestionAttemptDTO(
				qb.getQuestionId(),
				qb.getText(),
				qb.getCategory(),
				qb.getDifficulty(),
				qb.getOption1(),
				qb.getOption2()
				);
		}

		public static QuestionBank toEntity(QuestionDTO dto) {
			QuestionBank qb = new QuestionBank();
			qb.setQuestionId(dto.getQuestionId());
			qb.setText(dto.getText());
			qb.setCategory(dto.getCategory());
			qb.setDifficulty(dto.getDifficulty());
			qb.setOption1(dto.getOption1());
			qb.setOption2(dto.getOption2());
			qb.setCorrectAnswer(dto.getCorrectAnswer());
			return qb;
		}
		
		/*public static QuestionAttemptDTO mapToDTO(ExamQuestionMapping mapping)
		{
			QuestionBank q=mapping.getQuestion();
			return new QuestionAttemptDTO(
					q.getQuestionId(),
					q.getText(),
					q.getCategory(),
					q.getDifficulty(),
					q.getOption1(),
					q.getOption2()
					);
					
		}
		*/
		public static QuestionAttemptDTO mapToQuestionAttemptDTO(ExamQuestionMapping mapping)
		{
			QuestionBank q=mapping.getQuestion();
			return new QuestionAttemptDTO(
					q.getQuestionId(),
					q.getText(),
					q.getCategory(),
					q.getDifficulty(),
					q.getOption1(),
					q.getOption2()
					);
		}
		public static QuestionDTO mapToQuestionDTO(ExamQuestionMapping mapping)
		{
			QuestionBank q=mapping.getQuestion();
			return new QuestionDTO(
					q.getQuestionId(),
					q.getText(),
					q.getCategory(),
					q.getDifficulty(),
					q.getOption1(),
					q.getOption2(),
					q.getCorrectAnswer()
					
					);
		}
		
}
------------------------------------------------------------------
------------examquestonmappingrepo-----------------------------
package com.example.demo.Repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.demo.Entity.Exam;
import com.example.demo.Entity.ExamQuestionMapping;
import com.example.demo.Entity.QuestionBank;

public interface ExamQuestionMappingRepo extends JpaRepository<ExamQuestionMapping , Long>{

	List<ExamQuestionMapping> findByExam(Exam exam);
	
	List<ExamQuestionMapping> findByQuestion(QuestionBank question);
	
	List<ExamQuestionMapping> findByExamExamId(int examId);
}
--------------------------------------------------
---------------responserepository------------------
package com.example.demo.Repository;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.demo.Entity.Response;

@Repository
public interface ResponseRepository extends JpaRepository<Response, Long> {
	

	//<Response> findByUserId(Long userId);

	//List<Response> findByUserId(Integer userId);

	//List<Response> findByUserIdAndExamExamId(Integer userId, Integer examId);

	List<Response> findByExamExamId(Integer examId);

	List<Response> findByUserId(Integer userId);

	List<Response> findByUserIdAndExamExamId(Integer userId, Integer examId);

}
-------------------------------------------------
------------------examquestionmappingservice-----------------
package com.example.demo.Service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.Mapper.QuestionMapper;
import com.example.demo.DTO.QuestionAttemptDTO;
import com.example.demo.DTO.QuestionDTO;
import com.example.demo.Entity.Exam;
import com.example.demo.Entity.ExamQuestionMapping;
import com.example.demo.Entity.QuestionBank;
import com.example.demo.Repository.ExamQuestionMappingRepo;
import com.example.demo.Repository.ExamRepository;
import com.example.demo.Repository.QuestionBankRepo;

@Service
public class ExamQuestionMappingService {

	@Autowired
	private ExamQuestionMappingRepo mappingRepository;
	
	@Autowired
	private QuestionBankRepo qbRepo;
	@Autowired
	private ExamRepository examRepo;
	public ExamQuestionMapping saveMapping(Exam exam,QuestionBank question)
	{
		ExamQuestionMapping mapping=new ExamQuestionMapping();
		mapping.setExam(exam);
		mapping.setQuestion(question);
		return mappingRepository.save(mapping);
	}
	
	public List<ExamQuestionMapping> getMappingsByExam(Exam exam){
		return mappingRepository.findByExam(exam);
	}
	
	public List<ExamQuestionMapping> getMappingsByQuestion(QuestionBank question)
	{
		return mappingRepository.findByQuestion(question);
	}
	
	public List<ExamQuestionMapping> getAllExams()
	{
		return mappingRepository.findAll();
	}
	/*
	public List<QuestionAttemptDTO> getAllQuestionsForExam(int examId)
	{
		Exam exam=examRepo.findById(examId).orElseThrow();
		List<ExamQuestionMapping> mappings=qbRepo.findAll().stream()
				.filter(q->q.)
				.collect(Collectors.toList());
	}
	*/
	
	public  List<QuestionAttemptDTO> getAllQuestions(int examId)
	{
		List<ExamQuestionMapping> mappings=mappingRepository.findByExamExamId(examId);
		return mappings.stream()
				.map(QuestionMapper::mapToQuestionAttemptDTO)
				.collect(Collectors.toList());
	}

	public List<QuestionDTO> getAllQuestionsAdmin(int examId) {
		// TODO Auto-generated method stub
		List<ExamQuestionMapping> mappings=mappingRepository.findByExamExamId(examId);
		return mappings.stream()
				.map(QuestionMapper::mapToQuestionDTO)
				.collect(Collectors.toList());
	}
	

}
------------------------------------------------------------
-----------responseservice-------------------------
package com.example.demo.Service;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.example.demo.DTO.AnswerSubmissionDTO;
import com.example.demo.DTO.ExamSubmissionDTO;
import com.example.demo.DTO.ResponseSummaryDTO;
import com.example.demo.Entity.Exam;
import com.example.demo.Entity.QuestionBank;
import com.example.demo.Entity.Response;
import com.example.demo.Exception.ResourceNotFoundException;
import com.example.demo.Repository.ExamRepository;
import com.example.demo.Repository.QuestionBankRepo;
import com.example.demo.Repository.ResponseRepository;
import com.example.demo.Repository.UserRepository;

@Service
public class ResponseService {

    @Autowired
    private ExamRepository examRepository;
    
    @Autowired
    private QuestionBankRepo qbRepo;
    @Autowired
    private ResponseRepository responseRepository;
    @Autowired
    private UserRepository userRepo;

    public Response submitResponse(Response response) {
    	if(userRepo.existsById(response.getUserId()))
    	{	
        return responseRepository.save(response);
    	}
    	else {
    		throw new ResourceNotFoundException("No user found with "+response.getUserId());
    	}
    }

    public List<Response> getResponsesByUser(Integer userId) {
    	List<Response> responses = responseRepository.findByUserId(userId);
    		if (responses.isEmpty()) {
    			throw new ResourceNotFoundException("No responses found for user ID: " + userId);
    		}
        return responseRepository.findByUserId(userId);
    }

    public List<Response> getResponsesByExam(Integer examId) {
        if (!examRepository.existsById(examId)) {
            throw new ResourceNotFoundException("Exam not found with ID: " + examId);
        }
        return responseRepository.findByExamExamId(examId);
    }

    public List<Response> getResponsesByUserAndExam(Integer userId, Integer examId) {
        if (!examRepository.existsById(examId)) {
            throw new ResourceNotFoundException("Exam not found with ID: " + examId);
        }
        return responseRepository.findByUserIdAndExamExamId(userId, examId);
    }

	public ResponseEntity<List<ResponseSummaryDTO>> submitExam(Integer examId, ExamSubmissionDTO submissionDTO) {
		// TODO Auto-generated method stub
		List<ResponseSummaryDTO> responseSummaries = new ArrayList<>();
        Optional<Exam> examOpt = examRepository.findById(examId);
        		

        if (!examOpt.isPresent()) {
            throw new ResourceNotFoundException("Exam not found with ID: " + examId);
        }

        Exam exam = examOpt.get();

        for (AnswerSubmissionDTO ans : submissionDTO.getAnswers()) {
            Optional<QuestionBank> questionOpt = qbRepo.findById(ans.getQuestionId());
            		
            if (!questionOpt.isPresent()) {
                throw new ResourceNotFoundException("Question not found with ID: " + ans.getQuestionId());
            }

            QuestionBank question = questionOpt.get();
           
            
            Response response = new Response();
            response.setUserId(submissionDTO.getUserId());
            response.setExam(exam);
            response.setQuestion(question);
            response.setSubmittedAnswer(ans.getSubmittedAnswer());

           int marks = question.getCorrectAnswer().equals(ans.getSubmittedAnswer()) ? 2 : 0;
            response.setMarksObtained(marks);
            Response savedResponse = submitResponse(response);

            ResponseSummaryDTO summary = new ResponseSummaryDTO(
                    savedResponse.getResponseId(),
                    question.getQuestionId(),
                    ans.getSubmittedAnswer(),
                    marks
            );
            responseSummaries.add(summary);
        }

        return ResponseEntity.ok(responseSummaries);
	}
}
-------------------------------------------------------
